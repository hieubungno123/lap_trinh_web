package com.laptrinhjava.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.laptrinhjava.dao.GenericDAO;
import com.laptrinhjava.mapper.RowMapper;

public class AbstractDAO<T> implements GenericDAO<T> {
	public Connection getConnection() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			String url="jdbc:mysql://localhost:3306/new_servlet";
			String user="root";
			String password ="Nguloz.123";
			return DriverManager.getConnection(url,user,password);
		} catch (ClassNotFoundException | SQLException e) {
			return null;
		} 
	}

	@Override
	public <T> List<T> query(String sql, RowMapper<T> rowMapper, Object... parameters) {
		List<T> result = new ArrayList<T>();
		Connection connection = getConnection();
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		try {
			connection= getConnection();
			statement = connection.prepareStatement(sql);
			//set para
			setParameter(statement,parameters);
			resultSet = statement.executeQuery();
			while (resultSet.next()) {
				result.add(rowMapper.mapRow(resultSet));			
			}
			return result;
		} catch (Exception e) {
			return null;
		}finally {
			try {
				if (connection != null) {
					connection.close();
				}if (statement != null) {
					statement.close();
				}if (resultSet != null) {
					resultSet.close();
				}
				
				
			} catch (SQLException e2) {
				// TODO: handle exception
				return null;
			}

		}
		
		
	}

	private void setParameter(PreparedStatement statement, Object[] parameters) {
		try {
			for(int i=1;i<=parameters.length;i++) {
			Object parameter = parameters[i];
			int index = i+1;
			if(parameter instanceof Long) {
				statement.setLong(index,(Long) parameter);
			}else if(parameter instanceof String) {
				statement.setString(index, (String) parameter);
			} else if(parameter instanceof Integer) {
				statement.setInt(index, (Integer) parameter);
			}
		}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
	}

	@Override
	public void update(String sql, Object... parameters) {
		
		Connection connection = null;
		PreparedStatement statement = null;		
		try {
			connection = getConnection();
			connection.setAutoCommit(false);
			statement = connection.prepareStatement(sql);
			setParameter(statement, parameters);
			statement.executeUpdate();
			
			
			connection.commit();
		} catch (SQLException e) {
			if (connection != null) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}
			
		}finally {
			try {
				if (connection != null) {
					connection.close();
				}if (statement != null) {
					statement.close();
				}
			} catch (SQLException e2) {
				e2.printStackTrace();
			}

		}
		
	}

	@Override
	public Long insert(String sql, Object... parameters) {
		ResultSet resultSet = null;
		Connection connection = null;
		PreparedStatement statement = null;	
		Long id = null;
		try {
			connection = getConnection();
			connection.setAutoCommit(false);
			statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			setParameter(statement, parameters);
			statement.executeUpdate();
			resultSet = statement.getGeneratedKeys();
			if(resultSet.next()) {
				id = resultSet.getLong(1);
			}
			connection.commit();
			return id;
		} catch (SQLException e) {
			if (connection != null) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}
			
		}finally {
			try {
				if (connection != null) {
					connection.close();
				}if (statement != null) {
					statement.close();
				}if (resultSet != null) {
					resultSet.close();
				}
			} catch (SQLException e2) {
				e2.printStackTrace();
			}

		}
		return null;
	}
	
	
}

